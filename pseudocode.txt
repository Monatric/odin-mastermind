# Think about how you would set this problem up!
# Build the game assuming the computer randomly selects the secret colors and 
# the human player must guess them. Remember that you need to give the proper 
# feedback on how good the guess was each turn!

#note: decode_holes should have an arrow pointing next to it. Tell user it goes left to right

create a class Mastermind
  constant var red_peg "\u2022".colorize(:red)
                blue, green, violet, yellow, orange, black, white
  constant array of code pegs blue, green, red, violet, yellow, orange (try use bullet point)
    alt:
      constant hash of code pegs like so:
        {
          red_peg: "\u2022".colorize(:red),
          blue_peg: "\u2022".colorize(:blue),
          ...
        }
  constant array of key pegs black and white (try use asterisk)
  

  initialize an empty array secret_code
    this is to be used for the computer selecting secret colors
    then push the #sample numbers like so:
      4.times do
        secret_code.push(code_pegs.sample)
        puts test
      end
  
  initialize array of 2D decode_holes like [["O", "O", "O", "O"], ["O", "O", "O", "O"]...] x12
  initialize array of key_holes like [["o", "o", "o", "o"], ["o", "o", "o", "o"]... ] x12

  initialize 

  method start_game
    "Welcome to Mastermind! The computer has already selected the secret colors. Try your best to guess!"
    puts board
    4.times do
      secret_code.push(code_pegs.sample)
      puts test
    end
    choose_peg
  end

  method show_board
    12 times do n
      print decode_holes[n]
      puts key_holes[n]
    end
  end

  method choose_peg
    show_peg_options
    user_choice = gets.chomp
    until valid_choice?(user_choice)
      puts input_error_msg(user_input)
      user_input = gets.chomp
    end
    insert_code_peg(user_input.to_i)
  end

  method insert_code_peg(user_input)
    decode_holes[current_turn - 1][current_position] = code_pegs[choose_peg]
    current_position += 1
    confirm_choice
  end

  method confirm_choice
    puts "Final answer? Enter 1 if yes or 0 if no."
    user_choice = gets.chomp
    until valid_confirmation?(user_choice)
      puts input_error_msg(user_input)
      user_input = gets.chomp
    end

    can try
    if user_choice == 1 check_winner else undo
  end

  method give_feedback
    decode_holes[current_turn - 1] each with index |element, index| 
      check if index element of the secret_code is the same as decode_holes
        insert black in key_holes in current index
      else check if index element of the secret_code exists in decode_holes
        insert white in key_holes in current index

  method code_guessed?
    iterate over the decode_holes and check if secret_code matches
    if matches then true else false
  end

  method check_winner
    if current_turn == 12 && code_guessed == false
      puts "Computer has won! Better luck next time."
    elsif code_guessed? == true
      puts "Congratulations player!"
    else
      give_feedback
      choose_peg
    end
  end

  method announce_winner


  method undo
    decode_holes[current_turn - 1][current_position] = "O"
    current_position -= 1
  end
  
  method next_turn
    current_position = 0
    current_turn += 1
  end

  method current_turn
    1
  end

  method current_position
    0
  end

  method show_peg_options
    puts the peg array
    puts 0,1,2,3,4,5 or 6 to undo
  end
end

  

create class Player that extends to Mastermind
  initialize with parameters role
    @role = role
  end
end



1. check if it exists
2. another same color in guess that exists in secret but excess is blank

use tally to count them all
secret code: red blue green purple
guess: red blue purple blue

secret.tally
red = 1
blue = 1
green = 1
purple = 1

guess.tally
red = 1
blue = 2
purple = 1

try separating it
first iteration is checking for matches of same color and index, then black

second iteration is checking for matches of same color and index, but if theres black, then skip, else check if it exits, then put white

if guess_blue is 

----
try making temp code array
secret: red blue green green
guess: red green green red
temp sec: red blue green green
temp guess: red green green blue
  would be:
    ts: blue green green
    tg: green green blue
    key: black

    ts: blue green
    tg: green blue
    key: black black

    ts:
    tg:
    key: black black white white

secret: red blue green red
guess: red red red blue
  would be:
    ts: blue green red
    tg: red red blue
    key: black

    ts: blue green
    tg: red blue
    key: black white

    ts: green
    tg: red
    key: black white  white
idea is make a temporary secret code and temporary guess code
insert black when the element of the index matches each other, then remove from both temps
from both temps, insert white if at least one element of the index in temp_guess matches temp_Secret, then remove




s: red blue green red
g: red red green blue

counter: 
  red 1
  green 1
  
  make a secret_code_counter
    red 2
    blue 1
    green 1

  make a correct_guess_counter
    add +1 to key if correct in black
    then do the same for white
    if current element does not exist in secret code counter then next
    if correct_guess_counter key is greater than secret_code_counter key then next
    


  